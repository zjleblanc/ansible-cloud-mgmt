---
- name: Patch ec2
  hosts: "{{ _hosts | default('omit') }}"
  gather_facts: true
  become: true

  tasks:
    - name: Create change request
      tags: snow
      register: r_chg_req
      delegate_to: localhost
      run_once: true
      servicenow.itsm.change_request:
        type: standard
        state: new
        requested_by: zleblanc
        short_description: Patch EC2s
        description: "Affected hosts: {{ ','.join(ansible_play_hosts) }}"
        category: system_software
        priority: moderate
        risk: low
        impact: low

    - name: Update change request status
      tags: snow
      delegate_to: localhost
      run_once: true
      servicenow.itsm.change_request:
        number: "{{ r_chg_req.record.number }}"
        state: scheduled
        assignment_group: Ansible West Tigers

    - name: Update change request status
      tags: snow
      delegate_to: localhost
      run_once: true
      servicenow.itsm.change_request:
        number: "{{ r_chg_req.record.number }}"
        state: implement

    - name: Create a change task
      tags: snow
      delegate_to: localhost
      register: r_chg_task
      servicenow.itsm.change_request_task:
        configuration_item: "{{ inventory_hostname }}"
        change_request_number: "{{ r_chg_req.record.number }}"
        type: implementation
        state: open
        assigned_to: zleblanc
        short_description: "patching {{ inventory_hostname }}"
        description: "starting patch @ {{ ansible_date_time.iso8601 }}"
        planned_start_date: "{{ lookup('pipe', 'date +\"%Y%m%d %H:%M:%S\"') }}"
        planned_end_date: "{{ lookup('pipe', 'date -d \"+30 minutes\" +\"%Y%m%d %H:%M:%S\"') }}"
        other:
          approval: approved
      
    - name: Patch host with dnf
      when: ansible_pkg_mgr == 'dnf'
      register: r_patch_dnf
      ansible.builtin.dnf:
        name: "*"
        state: latest
        update_cache: true

    - name: Set patch results | dnf
      when: r_patch_dnf is not skipped
      ansible.builtin.set_fact:
        patch_results: "{{ r_patch_dnf }}"

    - name: Patch host with yum
      when: ansible_pkg_mgr == 'yum'
      register: r_patch_yum
      ansible.builtin.yum:
        name: "*"
        state: latest
        update_cache: true

    - name: Set patch results | yum
      when: r_patch_yum is not skipped
      ansible.builtin.set_fact:
        patch_results: "{{ r_patch_yum }}"

    - name: Patch windows host
      when: ansible_os_family|lower == 'windows'
      register: r_patch_win
      ansible.windows.win_updates:
        category_names: "*"
        reboot: true

    - name: Set patch results | windows
      when: r_patch_win is not skipped
      ansible.builtin.set_fact:
        patch_results: "{{ r_patch_win }}"
    
    - name: Close a change task
      tags: snow
      delegate_to: localhost
      servicenow.itsm.change_request_task:
        number: "{{ r_chg_task.record.number }}"
        state: closed
        close_code: successful
        close_notes: "{{ patch_results | to_nice_yaml }}"

    - name: Update change request status
      tags: snow
      delegate_to: localhost
      run_once: true
      servicenow.itsm.change_request:
        number: "{{ r_chg_req.record.number }}"
        state: review

    - name: Close change request
      tags: snow
      delegate_to: localhost
      run_once: true
      servicenow.itsm.change_request:
        number: "{{ r_chg_req.record.number }}"
        state: closed
        close_code: successful
        close_notes: Closed