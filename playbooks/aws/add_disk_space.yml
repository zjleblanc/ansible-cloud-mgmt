---
- name: Add disk space to EC2 instance
  hosts: localhost
  gather_facts: false
  tags: expand_disk

  vars:
    ansible_python_interpreter: /usr/bin/python3

  environment:
    AWS_REGION: "{{ _aws_region | default('us-east-1') }}"

  tasks:
    - name: Update state of incident
      when: incident_sys_id is defined
      tags: snow
      servicenow.itsm.incident:
        sys_id: "{{ incident_sys_id }}"
        state: in_progress

    - name: Gather information about a particular instance using ID
      register: r_instance_info
      amazon.aws.ec2_instance_info:
        filters:
          tag:Name: "{{ _host }}"
          instance-state-name: ["running"]

    - name: Add df results pre remediation
      when: 
        - hostvars[_host]['platform_details'] | default('unknown') | lower is search('red hat')
        - incident_sys_id is defined
      block:
        - name: Run df pre remediation
          delegate_to: "{{ _host }}"
          register: r_pre_df_cmd
          ansible.builtin.command: df

        - name: Get root stat pre remediation
          ansible.builtin.set_fact:
            df_pre_root_stat: "{{ r_pre_df_cmd.stdout | community.general.jc('df') | selectattr('mounted_on', 'equalto', '/') }}"

        - name: Add df results to incident
          servicenow.itsm.incident:
            sys_id: "{{ incident_sys_id }}"
            other:
              comments: >-
                [code]
                  <h3>Before Remediation<h3>
                  <p>Structured output from <b>df</b> on {{ _host }}</p>
                [/code]
                {{ df_pre_root_stat | to_nice_json(indent=2) | codify }}

    - name: Get volume info
      register: r_vol_info
      amazon.aws.ec2_vol_info:
        filters:
          volume-id: "{{ r_instance_info['instances'][0]['block_device_mappings'][0]['ebs']['volume_id'] }}"

    - name: Resize volume
      tags: resize
      register: r_vol
      amazon.aws.ec2_vol:
        instance: "{{ r_instance_info['instances'][0]['instance_id'] }}"
        id: "{{ r_instance_info['instances'][0]['block_device_mappings'][0]['ebs']['volume_id'] }}"
        modify_volume: true
        volume_size: "{{ (r_vol_info['volumes'][0].size * 1.2) | round(0, 'ceil') | int }}"

    - name: Restart ec2
      tags: resize
      amazon.aws.ec2_instance:
        instance_ids:
          - "{{ r_instance_info['instances'][0]['instance_id'] }}"
        state: restarted
        wait: true
        wait_timeout: 500

    - name: Get ec2 instance info after reboot
      tags: resize
      register: r_post_reboot_info
      amazon.aws.ec2_instance_info:
        filters:
          tag:Name: "{{ _host }}"
          instance-state-name: ["running"]

    - name: Add host with updated IP
      ansible.builtin.add_host:
        name: ec2_post_reboot
        ansible_host: "{{ (r_post_reboot_info | default(r_instance_info))['instances'][0]['public_ip_address'] }}"
        platform_details: "{{ hostvars[_host]['platform_details'] }}"
        ansible_connection: "{{ hostvars[_host]['platform_details'] == 'windows' | ternary('winrm', omit) }}"

- name: Expand the filesystem
  hosts: ec2_post_reboot
  gather_facts: false
  tags: expand_fs

  tasks:
    - name: Wait for system to become reachable
      ansible.builtin.wait_for_connection:
        timeout: "{{ reboot_timeout | default(300) }}"

    - name: Gather facts
      ansible.builtin.setup:
        gather_subset:
          - "!all"
          - "!min"
          - distribution

    - name: Resize drive to max available size
      when: ansible_distribution | lower == 'windows'
      community.windows.win_partition:
        drive_letter: C
        partition_size: -1

    - name: Gather facts
      ansible.builtin.setup:
        gather_subset:
          - devices
          - mounts

    - name: Add facts to incident
      when: incident_sys_id is defined
      tags: snow
      block:
        - name: Run df post remediation
          when: platform_details | default('unknown') | lower is search('red hat')
          register: r_post_df_cmd
          ansible.builtin.command: df

        - name: Get root stat pre remediation
          when: platform_details | default('unknown') | lower is search('red hat')
          ansible.builtin.set_fact:
            df_post_root_stat: "{{ r_post_df_cmd.stdout | community.general.jc('df') | selectattr('mounted_on', 'equalto', '/') }}"

        - name: Add df results post remediation
          when: platform_details | default('unknown') | lower is search('red hat')
          delegate_to: localhost
          vars:
          servicenow.itsm.incident:
            sys_id: "{{ incident_sys_id }}"
            other:
              comments: >-
                [code]
                  <h3>After Remediation<h3>
                  <p>Structured output from <b>df</b> on {{ inventory_hostname }}</p>
                [/code]
                {{ df_post_root_stat | to_nice_json(indent=2) | codify }}

        - name: Setup attachment files
          delegate_to: localhost
          ansible.builtin.set_fact:
            attachment_files:
              - path: /tmp/ansible_facts.json
                data: "{{ ansible_facts | to_nice_json }}"

        - name: Create attachments
          delegate_to: localhost
          loop: "{{ attachment_files }}"
          ansible.builtin.copy:
            content: "{{ item.data }}"
            dest: "{{ item.path }}"
            mode: 0755

        - name: Add facts to incident
          delegate_to: localhost
          servicenow.itsm.incident:
            sys_id: "{{ incident_sys_id }}"
            attachments: "{{ attachment_files | json_query('[].{path: path}') }}"

        - name: Set state to closed
          ansible.builtin.set_stats:
            data:
              incident_state: closed
              close_notes: Dynatrace + Event-Driven Ansible auto-remediation successful
